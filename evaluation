#!/bin/bash

# Compare les lignes du premier fichier aux lignes du deuxieme fichier
# Retourne 0 si les lignes du du premier fichier se retrouve contineument
# dans le deuxieme fichier
function cmppartialfile() {
  file1=$1;   file2=$2
  declare -a lines2
  declare -a lines1
  size1=0;  size2=0
  while IFS1= read -r line1;  do
    lines1[$size1]=$line1
    size1=`expr $size1 + 1`
  done < $file1
  while IFS2= read -r line2;  do
    lines2[$size2]=$line2
    size2=`expr $size2 + 1`
  done < $file2
  for (( i=0; i<$size2; i++ ));  do
    if [ "${lines2[$i]}" = "${lines1[0]}" ]; then break; fi
  done
  if [ "${lines2[$i]}" = "${lines1[0]}" ]; then
    for (( j=0; j<$size1; j++,i++ ));    do
      if [ "${lines2[$i]}" != "${lines1[$j]}" ]; then
        return 1
      fi
    done
    return 0
  else
    return 1
  fi
}


# Nom des fichiers contenant les resultats attendus
FICRESGRAPH1=resultats/ResultatGraphe1.txt
FICRESGRAPH2=resultats/ResultatGraphe2.txt

# Fichier contenant les resultats de l'execution courante
FIC1=tmp/eval_tmp.txt
# Repertoire des Fichiers contenant les differences ou les erreurs de l'execution courante
FICERR=tmp/tmperr

# Les 3 algos a tester dans l'ordre
ALGOS=("Dijkstra" "BFS" "DFS")

# Nombre de tests reussi et total
reussi=0
nbtotal=0

# Creation des repertoires si necessaire
# Suppression des fichiers existants
if [ ! -d tmp ]; then mkdir tmp; fi
if [ ! -d obj ]; then mkdir obj; fi
if [ ! -d bin ]; then mkdir bin; fi
rm -rf tmp/*
rm -rf obj/*
rm -rf bin/*

######################################
# Test de la compilation de pcc
######################################
echo "\n**********************\n"

echo "Compilation de bin/pcc"
nbtotal=`expr $nbtotal + 1 `
make bin/pcc > /dev/null
if [ $? -eq 0 ];
then
  echo "Compilation bin/pcc OK";
  reussi=`expr $reussi + 1 `;
else
  echo "Erreur de compilation";
fi

echo""
echo "-------------Etape 0----------------"
echo "Nombre de tests reussis :"$reussi" sur un total de "$nbtotal
echo "-------------------------------------"
######################################
# Test des valeurs de quelques chemins
######################################
FIC="graphes/graphe2.txt"
TEST=1
echo "\n**********************"
echo "Valeurs de quelques chemins de "$FIC

# Tests des algos 0 (Dijstra), 1 (BFS), 2 (DFS)
for algo in 0 1 2
  do
    # On efface les resultats precedents
    cat </dev/null  >$FICERR"_test"$TEST"_"$algo".txt"
    cat </dev/null > $FIC1
    # Test des chemins demarant en 1 ou 3 et arrivant en 2, 4 ou 6
    for dep in {0..13};
      do
        for arr in  {0..13};
          do
            if (( "$dep" < "$arr" )); then
            if [ "$dep" -ne "$arr" ]; then
            cat </dev/null > $FIC1
            echo "Test de la valeur du pcc par "${ALGOS[$algo]}" entre sommets "$dep" et "$arr" sur "$FIC
            bin/pcc $FIC $algo $dep $arr > $FIC1 2>>$FIC1
            if [ $? -ne 139 ]; then
              cmppartialfile $FIC1 $FICRESGRAPH2
              if [ $? -eq 0 ];
              then
                reussi=`expr $reussi + 1 `;
              else
                echo "Erreur valeur des chemins ${ALGOS[$algo]} entre sommets "$dep" et "$arr" sur "$FIC
                cat  $FICERR"_test"$TEST"_"$algo".txt" $FIC1 > .tmppcc
                mv .tmppcc $FICERR"_test"$TEST"_"$algo".txt"
                echo "Voir fichier "$FICERR"_test"$TEST"_"$algo".txt"
              fi
            fi
            nbtotal=`expr $nbtotal + 1 `
            fi
          fi
          done
      done
done

echo""
echo "-------------Etape 1----------------"
echo "Nombre de tests reussis :"$reussi" sur un total de "$nbtotal
echo "-------------------------------------"

######################################
# Test de l'affichage de quelques chemins
######################################
FIC="graphes/graphe1.txt"
TEST=2
echo "\n**********************"
# On efface les resultats precedents
cat </dev/null > $FIC1

#algo=0    # Affichage des chemins par algo numero 0, ie Dijstra
for algo in 0 1 2
  do
echo "Affichage de quelques chemins de "$FIC" par "${ALGOS[$algo]}
for dep in  {0..7};
  do
    for arr in  {0..7};
      do
        if (( "$dep" < "$arr" )); then
        if [ "$dep" -ne "$arr" ]; then
        cat </dev/null > $FIC1
        echo "Affichage du pcc par "${ALGOS[$algo]}" entre sommets "$dep" et "$arr" sur "$FIC
        bin/pcc $FIC $algo $dep $arr -v > $FIC1
        if [ $? -ne 139 ]; then
          cmppartialfile $FIC1 $FICRESGRAPH1
          if [ $? -eq 0 ];
          then
            reussi=`expr $reussi + 1 `;
          else
            echo "Erreur Affichage des chemins ${ALGOS[$algo]} entre sommets "$dep" et "$arr" sur "$FIC
            cat  $FICERR"_test"$TEST"_"$algo".txt" $FIC1 > .tmppcc
            mv .tmppcc $FICERR"_test"$TEST"_"$algo".txt"
            echo "Voir fichier "$FICERR"_test"$TEST"_"$algo".txt"
          fi
        fi
        nbtotal=`expr $nbtotal + 1 `
      fi
    fi
      done
  done
done

echo""
echo "-------------Etape 2----------------"
echo "Nombre de tests reussis :"$reussi" sur un total de "$nbtotal
echo "-------------------------------------"

######################################
# Test de la gestion memoire par valgrind sur la valeur des chemins
######################################
TEST=3
echo "\n**********************"
FIC="graphes/graphe2.txt"
echo "Test Gestion memoire avec Valgrind sur la valeur de quelques chemins de "$FIC
for algo in 0 1 2
  do
    cat </dev/null > $FIC1
    cat </dev/null > $FICERR"_test"$TEST"_"$algo".txt"
    for dep in 1 ;
      do
        for arr in 2 4;
          do
            echo "Test de "${ALGOS[$algo]}" entre sommets "$dep" et "$arr" sur "$FICERR"_test"$TEST"_"$algo".txt"
            valgrind bin/pcc $FIC $algo $dep $arr >/dev/null  2>> $FICERR"_test"$TEST"_"$algo".txt"
          done
      done
    # Recherche des Invalid read/write
    nbtotal=`expr $nbtotal + 1 `
    nberr=`grep Invalid $FICERR"_test"$TEST"_"$algo".txt" | wc -l`
    if [ $nberr -eq 0 ];
    then
      echo "Test memoire OK pour la valeur des chemins par ${ALGOS[$algo]} OK";
      reussi=`expr $reussi + 1 `;
    else
      echo $nberr"Invalid : Erreur gestion memoire pour la valeur des chemins ${ALGOS[$algo]} : voir fichier $FICERR"_test"$TEST"_"$algo".txt"";
    fi
    # Etat de la memoire a la fin de l'execution
    errfree=0
    freeomit=`grep lost $FICERR"_test"$TEST"_"$algo".txt" | awk '{print $4}' | tr -d ',' `
    for line in $freeomit
      do
        if [ $line != 0 ];
        then
          errfree=1
        fi
      done
    nbtotal=`expr $nbtotal + 1 `
    if [ $errfree -eq 0 ];
    then
      echo "Liberation memoire OK pour la valeur des chemins par ${ALGOS[$algo]} OK";
      reussi=`expr $reussi + 1 `;
    else
      echo "Erreur liberation memoire pour la valeur des chemins ${ALGOS[$algo]} : voir fichier $FICERR"_test"$TEST"_"$algo".txt"";
    fi
done

echo""
echo "-------------Etape 3----------------"
echo "Nombre de tests reussis :"$reussi" sur un total de "$nbtotal
echo "-------------------------------------"


######################################
# Test de la valeur de quelques chemins du metro
######################################
FIC="graphes/metro.txt"
TEST=4
echo "\n**********************"
echo "Compilation de bin/metropcc"
nbtotal=`expr $nbtotal + 1 `
make bin/metropcc > /dev/null
if [ $? -eq 0 ];
then
  echo "Compilation bin/pcc OK";
  reussi=`expr $reussi + 1 `;
else
  echo "Erreur de compilation";
fi

if [ -x bin/metropcc ]; then
  # On efface les resultats precedents
  cat </dev/null > $FIC1
  cat </dev/null > $FICERR"_test"$TEST"_"$algo".txt"
  FICORACLE="resultats/Resultatmetro1.txt"
  #algo=0    # Valeur des chemins par algo numero 0, ie Dijstra
  for algo in 0 1 2
    do
      echo "Valeur de quelques chemins de "$FIC" par "${ALGOS[$algo]}
      for dep in Argentine Goncourt ;
      do
        for arr in Ermont-Eaubonne Villepinte;
          do
            # FICORACLE="resultats/valmetro_"$dep"_"$arr".txt"
            cat </dev/null > $FIC1
            echo "Valeur du pcc par "${ALGOS[$algo]}" entre sommets "$dep" et "$arr" sur "$FIC
            bin/metropcc $FIC $algo $dep $arr > $FIC1
            if [ $? -ne 139 ]; then
              cmppartialfile $FIC1 $FICORACLE
            if [ $? -eq 0 ];
            then
              reussi=`expr $reussi + 1 `;
            else
              echo "Erreur Affichage des chemins ${ALGOS[$algo]} entre sommets "$dep" et "$arr" sur "$FIC
              cat  $FICERR"_test"$TEST"_"$algo".txt" $FIC1 > .tmppcc
              mv .tmppcc $FICERR"_test"$TEST"_"$algo".txt"
              echo "Voir fichier "$FICERR"_test"$TEST"_"$algo".txt"
            fi
          fi
          nbtotal=`expr $nbtotal + 1 `
        done
      done
   done
fi
echo""
echo "-------------Etape 4----------------"
echo "Nombre de tests reussis :"$reussi" sur un total de "$nbtotal
echo "-------------------------------------"

######################################
# Test de l'affichage de quelques chemins du metro
######################################
TEST=5
if [ -x bin/metropcc ]; then
  # On efface les resultats precedents
  cat </dev/null > $FIC1
  cat </dev/null > $FICERR"_test"$TEST"_"$algo".txt"

  FICORACLE="resultats/Resultatmetro2.txt"
  #algo=0    # Affichage des chemins par algo numero 0, ie Dijstra
  for algo in 0 1 2
    do
  echo "Affichage de quelques chemins du metro "$FIC" par "${ALGOS[$algo]}
  for dep in Goncourt ;
    do
      for arr in Pyrénées Ermont-Eaubonne Villepinte;
        do
          if [ -f $FICORACLE ]; then
            cat </dev/null > $FIC1
            echo "Valeur du pcc par "${ALGOS[$algo]}" entre sommets "$dep" et "$arr" sur "$FIC
            bin/metropcc $FIC $algo $dep $arr -v > $FIC1
            if [ $? -ne 139 ]; then
              cmppartialfile $FIC1 $FICORACLE
              if [ $? -eq 0 ];
              then
                reussi=`expr $reussi + 1 `;
              else
                echo "Erreur Affichage des chemins ${ALGOS[$algo]} entre sommets "$dep" et "$arr" sur "$FIC
                cat  $FICERR"_test"$TEST"_"$algo".txt" $FIC1 > .tmppcc
                mv .tmppcc $FICERR"_test"$TEST"_"$algo".txt"
                echo "Voir fichier "$FICERR"_test"$TEST"_"$algo".txt"
              fi
            fi
          fi
          nbtotal=`expr $nbtotal + 1 `
        done
    done
  done
fi
######################################
# Presence de fichiers de tests
######################################
TEST=6
echo "\n**********************"
nbtests=`grep main \`ls tests/*.c\`| wc -l`
echo "Nombre de fichiers de tests "$nbtests
echo "\n**********************"


echo "Nombre de tests reussi : "$reussi"/"$nbtotal
